// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum PaymentType {
  PROJECT_PAYMENT
  MILESTONE_PAYMENT
  BONUS_PAYMENT
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
  PAID
}

enum SubmissionStatus {
  PENDING_REVIEW
  APPROVED
  NEEDS_REVISION
  REJECTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  HELD_IN_ESCROW
}

enum EscrowStatus {
  PENDING
  APPROVED
  RELEASED
  DISPUTED
  AUTO_RELEASED
}

enum WalletTransactionType {
  DEPOSIT
  WITHDRAW
  PAYMENT_SENT
  PAYMENT_RECEIVED
  REFUND
  FEE
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model User {
  id                      String        @id @default(cuid())
  email                   String        @unique
  password                String
  name                    String
  studentId               String        @unique
  university              String
  course                  String
  year                    Int
  bio                     String?
  skills                  String
  rating                  Float         @default(0)
  reviewCount             Int           @default(0)
  walletBalance           Float         @default(0)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  
  // Relations
  projects                Project[]
  applications            Application[] @relation("FreelancerApplications")
  givenReviews            Review[]      @relation("ReviewGiver")
  receivedReviews         Review[]      @relation("ReviewReceiver")
  sentMessages            Message[]
  notifications           Notification[]
  payerPayments           Payment[]     @relation("PayerPayments")
  receiverPayments        Payment[]     @relation("ReceiverPayments")
  workSubmissions         WorkSubmission[] @relation("WorkSubmissions")
  walletTransactions      WalletTransaction[]
  withdrawalRequests      WithdrawalRequest[]
}

model Project {
  id            String        @id @default(cuid())
  title         String
  description   String
  budget        Float
  deadline      DateTime
  skills        String
  status        ProjectStatus @default(OPEN)
  ownerId       String
  owner         User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  applications  Application[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Application {
  id             String            @id @default(cuid())
  projectId      String
  project        Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancerId   String
  freelancer     User              @relation("FreelancerApplications", fields: [freelancerId], references: [id], onDelete: Cascade)
  coverMessage   String
  proposedBudget Float
  status         ApplicationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  chat           Chat?
  payments       Payment[]
  workSubmissions WorkSubmission[]
}

model Review {
  id           String @id @default(cuid())
  rating       Int
  comment      String
  giverId      String
  giver        User   @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiverId   String
  receiver     User   @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model Chat {
  id            String      @id @default(cuid())
  applicationId String      @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  messages      Message[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Message {
  id               String    @id @default(cuid())
  chatId           String
  chat             Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId         String
  sender           User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content          String
  attachmentUrl    String?
  attachmentName   String?
  attachmentSize   Int?
  attachmentType   String?
  createdAt        DateTime  @default(now())
  readAt           DateTime?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  data      String?
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  applicationId   String        
  application     Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  payerId         String
  payer           User          @relation("PayerPayments", fields: [payerId], references: [id], onDelete: Cascade)
  receiverId      String
  receiver        User          @relation("ReceiverPayments", fields: [receiverId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String        @default("LKR")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  payhereOrderId  String?       @unique
  paymentData     String?
  paymentType     PaymentType   @default(PROJECT_PAYMENT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  escrowRelease   EscrowRelease?
  milestones      Milestone[]
}

model Milestone {
  id              String          @id @default(cuid())
  paymentId       String
  payment         Payment         @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  title           String
  description     String
  amount          Float
  dueDate         DateTime?
  status          MilestoneStatus @default(PENDING)
  submissionUrl   String?
  submissionNote  String?
  feedbackNote    String?
  submittedAt     DateTime?
  approvedAt      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model WorkSubmission {
  id              String      @id @default(cuid())
  applicationId   String
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  title           String
  description     String
  fileUrls        String
  submittedBy     String
  submitter       User        @relation("WorkSubmissions", fields: [submittedBy], references: [id], onDelete: Cascade)
  status          SubmissionStatus @default(PENDING_REVIEW)
  clientFeedback  String?
  revisionRequest String?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model EscrowRelease {
  id                String    @id @default(cuid())
  paymentId         String    @unique
  payment           Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  releaseStatus     EscrowStatus @default(PENDING)
  clientApproval    Boolean   @default(false)
  freelancerRequest Boolean   @default(false)
  adminApproval     Boolean   @default(false)
  autoReleaseDate   DateTime?
  releaseDate       DateTime?
  releaseReason     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model WalletTransaction {
  id              String              @id @default(cuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            WalletTransactionType
  amount          Float
  currency        String              @default("LKR")
  description     String
  referenceId     String?
  balanceBefore   Float
  balanceAfter    Float
  payhereOrderId  String?
  paymentData     String?
  createdAt       DateTime            @default(now())
}

model WithdrawalRequest {
  id              String            @id @default(cuid())
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String            @default("LKR")
  bankAccount     String
  status          WithdrawalStatus  @default(PENDING)
  requestedAt     DateTime          @default(now())
  processedAt     DateTime?
  completedAt     DateTime?
  failureReason   String?
  adminNotes      String?
  transactionId   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}
