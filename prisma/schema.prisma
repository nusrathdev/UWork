generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(cuid())
  email                   String        @unique
  password                String
  name                    String
  studentId               String        @unique
  university              String
  course                  String
  year                    Int
  bio                     String?
  skills                  String
  rating                  Float         @default(0)
  reviewCount             Int           @default(0)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  projects                Project[]
  applications            Application[] @relation("FreelancerApplications")
  givenReviews            Review[]      @relation("ReviewGiver")
  receivedReviews         Review[]      @relation("ReviewReceiver")
  sentMessages            Message[]
  notifications           Notification[]
}

model Project {
  id            String        @id @default(cuid())
  title         String
  description   String
  budget        Float
  deadline      DateTime
  skills        String
  status        ProjectStatus @default(OPEN)
  ownerId       String
  owner         User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  applications  Application[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Application {
  id             String            @id @default(cuid())
  projectId      String
  project        Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancerId   String
  freelancer     User              @relation("FreelancerApplications", fields: [freelancerId], references: [id], onDelete: Cascade)
  coverMessage   String
  proposedBudget Float
  status         ApplicationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  chat           Chat?
}

model Review {
  id           String @id @default(cuid())
  rating       Int
  comment      String
  giverId      String
  giver        User   @relation("ReviewGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiverId   String
  receiver     User   @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}

model Chat {
  id            String      @id @default(cuid())
  applicationId String      @unique
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  messages      Message[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Message {
  id        String    @id @default(cuid())
  chatId    String
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime  @default(now())
  readAt    DateTime?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // e.g. APPLICATION_APPROVED, APPLICATION_REJECTED, NEW_MESSAGE, PROJECT_UPDATE
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  data      String?  // Optional JSON string for extra data (applicationId, projectId, etc)
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}