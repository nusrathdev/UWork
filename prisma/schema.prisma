generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  studentId String   @unique
  university String
  course    String
  year      Int
  skills    String   // JSON string of skills array
  bio       String?
  avatar    String?
  rating    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projects      Project[]
  applications  Application[]
  reviews       Review[]
  givenReviews  Review[] @relation("ReviewGiver")
  
  @@map("users")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  budget      Float
  deadline    DateTime
  skills      String   // JSON string of skills array
  status      String   @default("OPEN") // OPEN, IN_PROGRESS, COMPLETED, CANCELLED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ownerId     String
  owner       User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  applications Application[]
  
  @@map("projects")
}

model Application {
  id        String   @id @default(cuid())
  message   String
  proposedBudget Float
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("applications")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  
  revieweeId String
  reviewee   User   @relation(fields: [revieweeId], references: [id], onDelete: Cascade)
  
  reviewerId String
  reviewer   User   @relation("ReviewGiver", fields: [reviewerId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}